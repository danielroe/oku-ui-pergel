import { join, relative } from 'node:path'
import type { NuxtPergel } from '../runtime/core/types/nuxtModule'
import { writeFilePergel } from '../runtime/core/utils/writeFilePergel'

export function writeEnvExample(
  nuxt: NuxtPergel,
) {
  const envs = Object.keys(nuxt._pergel.readmeJson).map((projectName) => {
    const project = nuxt._pergel.readmeJson[projectName]
    const modules = Object.keys(project).map((moduleName) => {
      const module = project[moduleName]
      const env = module.env
      return { moduleName, env }
    })
    return { projectName, modules }
  })

  let envTemplate = ''

  // write envs to pergel/.env.example
  envTemplate += `# Auto generated. Do not edit this file manually.\n\n`

  for (const project of envs) {
    const projectName = project.projectName
    const modules = project.modules
    for (const module of modules) {
      const moduleName = module.moduleName
      const env = module.env
      if (env) {
        envTemplate += `# ${projectName}/${moduleName}\n`
        for (const key of Object.keys(env))
          envTemplate += `${key}=${env[key]}\n`

        envTemplate += '\n'
      }
    }
  }

  const file = join(nuxt.options.rootDir, 'pergel', '.env.example')

  nuxt._pergel.exitPergelFolder && writeFilePergel(file, envTemplate)

  nuxt._pergel.watchDirs = nuxt._pergel.projects
    ? Object.keys(nuxt._pergel.projects).map((projectName) => {
      const project = nuxt._pergel.projects[projectName] as any

      return Object.keys(project).map(moduleName => ({
        projectName,
        moduleName,
        serverDir: relative(nuxt.options.rootDir, project[moduleName].serverDir),
        rootModuleDir: relative(nuxt.options.rootDir, project[moduleName].rootModuleDir),
      }))
    },
    ).flat()
    : []
}
